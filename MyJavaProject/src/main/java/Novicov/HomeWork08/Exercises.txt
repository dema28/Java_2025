Задача №1

Создать класс Month с полями: имя месяца, количеством дней и количеством рабочих дней.
Создать класс MonthUtils который бы хранил подготовленные месяцы
или их массивы для использования (объекты класса Month).

Задача №2

Необходимо создать класс Employee с полями: имя, возраст, пол и ЗП в день.
Все поля сделать приватными и для каждого поля добавить методы set и get.
Класс должен иметь метод - getSalary(Month[] monthArray),
метод возвращает зарплату за те месяцы которые были переданы в качестве аргумента.

Задача №3

Необходимо создать класс Manager с полями: имя, возраст, пол, ЗП в день и количество подчиненных.
Класс должен иметь метод - getSalary(Month[] monthArray),
метод возвращает зарплату за те месяцы которые были переданы в качестве аргумента.
К рассчитанной ЗП должно прибавляться по 1% за каждого подчиненного.

Это задание — развитие Tasks#8. Можно изменить существующий код, можно писать новый.

Задача №1

Создать неизменяемый (immutable) класс Month с полями: имя месяца, количеством дней и количеством рабочих дней.
Поля должны быть спрятаны, для каждого поля создать getter.
Создать класс MonthUtils который бы хранил подготовленные месяцы или
их массивы для использования (объекты класса Month).

Задача №2

Необходимо создать класс Employee с полями: имя, возраст, пол и ЗП в день.
Имя и ЗП должны быть обязательными, остальные поля — нет.
Создать необходимые конструкторы и / или setter-ы (по собственному разумению),
чтобы было удобно создавать эти объекты.
Класс должен иметь метод - getSalary(Month[] monthArray),
метод возвращает зарплату за те месяцы которые были переданы в качестве аргумента.

Задача №3

Необходимо создать класс Manager с полями: имя, возраст, пол, ЗП в день и количество подчиненных.
Поля должны быть спрятаны, для каждого поля создать getter.
Класс должен иметь метод - getSalary(Month[] monthArray),
метод возвращает зарплату за те месяцы которые были переданы в качестве аргумента.
К рассчитанной ЗП должно прибавляться по 1% за каждого подчиненного.
В классе Employee создать метод convertToManager(int numberOfSubordinates).
Этот метод создаст и вернет объект типа Manager с теми же личными данными,
что были у Employee, и запишет переданное в него количество подчиненных.



Это задание — развитие Tasks#8 и Tasks#9. Можно изменить существующий код, можно писать новый.

Задача №1

Необходимо создать иерархию классов.
Класс Employee должен иметь поля: имя, возраст, пол и ЗП в день.
Имя и ЗП должны быть обязательными, остальные поля — нет.
Класс должен иметь метод - getSalary(Month[] monthArray),
метод возвращает зарплату за те месяцы которые были переданы в качестве аргумента.
Класс Manager должен иметь все то, что имеет Employee, и вдобавок, хранить число подчиненных.
Метод getSalary(Month[] monthArray) должен учитывать количество подчиненных,
и давать надбавку к зарплате в 1% за каждого подчиненного.
Класс Director должен вести себя как Manager, но давать надбавку к зарплате в 3% за каждого подчиненного.

Задача №2

Создать класс SalaryUtils, и в нем написать метод getTotalSalary(Employee[] employees, Month[] months),
который подсчитает общую сумму к выплате на всех сотрудников — простых работников, менеджеров и директоров.


